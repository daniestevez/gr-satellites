/*
 * Copyright 2025 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(time_dependent_delay.h)                                    */
/* BINDTOOL_HEADER_FILE_HASH(08e2a2d78b646b1021c6207d793cc1ac)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <satellites/time_dependent_delay.h>
// pydoc.h is automatically generated in the build directory
#include <time_dependent_delay_pydoc.h>

void bind_time_dependent_delay(py::module& m)
{

    using time_dependent_delay = ::gr::satellites::time_dependent_delay;


    py::class_<time_dependent_delay,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<time_dependent_delay>>(
        m, "time_dependent_delay", D(time_dependent_delay))

        .def(py::init(&time_dependent_delay::make),
             py::arg("filename"),
             py::arg("samp_rate"),
             py::arg("t0"),
             py::arg("taps"),
             py::arg("num_filters"),
             D(time_dependent_delay, make))


        .def("set_time",
             &time_dependent_delay::set_time,
             py::arg("t"),
             D(time_dependent_delay, set_time))


        .def("time", &time_dependent_delay::time, D(time_dependent_delay, time))


        .def("delay", &time_dependent_delay::delay, D(time_dependent_delay, delay))

        ;
}
